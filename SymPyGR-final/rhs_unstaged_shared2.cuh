// generated by Dendro-GR SymPyGR code gernation framework
//date: 2018-11-12 08:52:13


namespace cuda { 




/** computes rhs a_rhs*/
_device__ void a_rhs(int pp, double eta, double *dev_var_in,
	double * dev_var_out,){
	#include "para_derivs_offsets.h"
,
	#include "para_staged.h"
){
	//allocate memory for shared deriv variables. 


	 //input vars  shared alloc begin
	__shared__ double beta2_shared[256];
	__shared__ double K_shared[256];
	__shared__ double beta1_shared[256];
	__shared__ double beta0_shared[256];
	__shared__ double alpha_shared[256];
	 //input vars shared alloc end
	 // staged vars shared alloc begin
	__shared__ double a_r_shared[256];
	 // staged vars shared alloc end
	 // deriv vars shared alloc begin
	__shared__ double agrad_2_alpha_shared[256];
	__shared__ double agrad_1_alpha_shared[256];
	__shared__ double agrad_0_alpha_shared[256];
	 // deriv vars shared alloc end


	int thread_id = blockIdx.x*256 + threadIdx.x;
	 //input vars begin
	 beta2_shared[t] = dev_var_in[beta2+pp];
	 K_shared[t] = dev_var_in[K+pp];
	 beta1_shared[t] = dev_var_in[beta1+pp];
	 beta0_shared[t] = dev_var_in[beta0+pp];
	 alpha_shared[t] = dev_var_in[alpha+pp];
	 //input vars end
	 // staged vars begin
	 a_r_shared[t] = dev_var_out[a_r+pp];
	 // staged vars end
	 // deriv vars begin
	 agrad_2_alpha_shared[t] = agrad_2_alpha[pp];
	 agrad_1_alpha_shared[t] = agrad_1_alpha[pp];
	 agrad_0_alpha_shared[t] = agrad_0_alpha[pp];
	 // deriv vars end
	 // deriv vars end
	__syncthreads();
		//load data from global to shared memory ends
		      // Dendro: {{{ 
		      // Dendro: original ops: 12
		      // Dendro: printing temp variables
		      // Dendro: printing variables

		      a_rhspp = -2*K_shared[t]*alpha_shared[t] + lambda[0]*(beta0_shared[t]*agrad_0_alpha_shared[t] + beta1_shared[t]*agrad_1_alpha_shared[t] + beta2_shared[t]*agrad_2_alpha_shared[t]);
		      // Dendro: reduced ops: 12
		      // Dendro: }}} 
	// store computed variables

} /** computes rhs b_rhs*/
_device__ void b_rhs(int pp, double eta, double *dev_var_in,
	double * dev_var_out,){
	#include "para_derivs_offsets.h"
,
	#include "para_staged.h"
){
	//allocate memory for shared deriv variables. 


	 //input vars  shared alloc begin
	__shared__ double beta2_shared[256];
	__shared__ double B1_shared[256];
	__shared__ double B0_shared[256];
	__shared__ double B2_shared[256];
	__shared__ double beta1_shared[256];
	__shared__ double beta0_shared[256];
	__shared__ double alpha_shared[256];
	 //input vars shared alloc end
	 // staged vars shared alloc begin
	__shared__ double b_rh_shared[256];
	 // staged vars shared alloc end
	 // deriv vars shared alloc begin
	__shared__ double agrad_0_beta0_shared[256];
	__shared__ double agrad_2_beta1_shared[256];
	__shared__ double agrad_1_beta2_shared[256];
	__shared__ double agrad_0_beta1_shared[256];
	__shared__ double agrad_2_beta0_shared[256];
	__shared__ double agrad_1_beta0_shared[256];
	__shared__ double agrad_1_beta1_shared[256];
	__shared__ double agrad_0_beta2_shared[256];
	__shared__ double agrad_2_beta2_shared[256];
	 // deriv vars shared alloc end


	int thread_id = blockIdx.x*256 + threadIdx.x;
	 //input vars begin
	 beta2_shared[t] = dev_var_in[beta2+pp];
	 B1_shared[t] = dev_var_in[B1+pp];
	 B0_shared[t] = dev_var_in[B0+pp];
	 B2_shared[t] = dev_var_in[B2+pp];
	 beta1_shared[t] = dev_var_in[beta1+pp];
	 beta0_shared[t] = dev_var_in[beta0+pp];
	 alpha_shared[t] = dev_var_in[alpha+pp];
	 //input vars end
	 // staged vars begin
	 b_rh_shared[t] = dev_var_out[b_rh+pp];
	 // staged vars end
	 // deriv vars begin
	 agrad_0_beta0_shared[t] = agrad_0_beta0[pp];
	 agrad_2_beta1_shared[t] = agrad_2_beta1[pp];
	 agrad_1_beta2_shared[t] = agrad_1_beta2[pp];
	 agrad_0_beta1_shared[t] = agrad_0_beta1[pp];
	 agrad_2_beta0_shared[t] = agrad_2_beta0[pp];
	 agrad_1_beta0_shared[t] = agrad_1_beta0[pp];
	 agrad_1_beta1_shared[t] = agrad_1_beta1[pp];
	 agrad_0_beta2_shared[t] = agrad_0_beta2[pp];
	 agrad_2_beta2_shared[t] = agrad_2_beta2[pp];
	 // deriv vars end
	 // deriv vars end
	__syncthreads();
		//load data from global to shared memory ends
		      // Dendro: {{{ 
		      // Dendro: original ops: 51
		      // Dendro: printing temp variables
		   double 		DENDRO_0 = (3.0L/4.0L)*alpha_shared[t]*lambda_f[1] + (3.0L/4.0L)*lambda_f[0];
		      // Dendro: printing variables

		      b_rhs0pp = B0_shared[t]*DENDRO_0 + lambda[1]*(beta0_shared[t]*agrad_0_beta0_shared[t] + beta1_shared[t]*agrad_1_beta0_shared[t] + beta2_shared[t]*agrad_2_beta0_shared[t]);
		      b_rhs1pp = B1_shared[t]*DENDRO_0 + lambda[1]*(beta0_shared[t]*agrad_0_beta1_shared[t] + beta1_shared[t]*agrad_1_beta1_shared[t] + beta2_shared[t]*agrad_2_beta1_shared[t]);
		      b_rhs2pp = B2_shared[t]*DENDRO_0 + lambda[1]*(beta0_shared[t]*agrad_0_beta2_shared[t] + beta1_shared[t]*agrad_1_beta2_shared[t] + beta2_shared[t]*agrad_2_beta2_shared[t]);
		      // Dendro: reduced ops: 39
		      // Dendro: }}} 
	// store computed variables

} /** computes rhs gt_rhs*/
_device__ void gt_rhs(int pp, double eta, double *dev_var_in,
	double * dev_var_out,){
	#include "para_derivs_offsets.h"
,
	#include "para_staged.h"
){
	//allocate memory for shared deriv variables. 


	 //input vars  shared alloc begin
	__shared__ double gt2_shared[128];
	__shared__ double beta2_shared[128];
	__shared__ double At3_shared[128];
	__shared__ double gt3_shared[128];
	__shared__ double gt4_shared[128];
	__shared__ double gt1_shared[128];
	__shared__ double At0_shared[128];
	__shared__ double At2_shared[128];
	__shared__ double At4_shared[128];
	__shared__ double beta1_shared[128];
	__shared__ double beta0_shared[128];
	__shared__ double gt5_shared[128];
	__shared__ double At5_shared[128];
	__shared__ double gt0_shared[128];
	__shared__ double alpha_shared[128];
	__shared__ double At1_shared[128];
	 //input vars shared alloc end
	 // staged vars shared alloc begin
	__shared__ double gt_rhs_shared[128];
	 // staged vars shared alloc end
	 // deriv vars shared alloc begin
	__shared__ double agrad_2_gt4_shared[128];
	__shared__ double agrad_2_gt0_shared[128];
	__shared__ double agrad_1_gt2_shared[128];
	__shared__ double grad_2_beta1_shared[128];
	__shared__ double agrad_0_gt5_shared[128];
	__shared__ double grad_1_beta1_shared[128];
	__shared__ double agrad_2_gt1_shared[128];
	__shared__ double agrad_2_gt2_shared[128];
	__shared__ double agrad_0_gt1_shared[128];
	__shared__ double agrad_1_gt5_shared[128];
	__shared__ double agrad_1_gt4_shared[128];
	__shared__ double agrad_0_gt3_shared[128];
	__shared__ double agrad_1_gt0_shared[128];
	__shared__ double agrad_0_gt2_shared[128];
	__shared__ double grad_2_beta0_shared[128];
	__shared__ double grad_0_beta2_shared[128];
	__shared__ double agrad_2_gt5_shared[128];
	__shared__ double grad_0_beta0_shared[128];
	__shared__ double agrad_1_gt3_shared[128];
	__shared__ double agrad_0_gt4_shared[128];
	__shared__ double agrad_2_gt3_shared[128];
	__shared__ double agrad_0_gt0_shared[128];
	__shared__ double grad_0_beta1_shared[128];
	__shared__ double agrad_1_gt1_shared[128];
	__shared__ double grad_2_beta2_shared[128];
	__shared__ double grad_1_beta0_shared[128];
	__shared__ double grad_1_beta2_shared[128];
	 // deriv vars shared alloc end


	int thread_id = blockIdx.x*128 + threadIdx.x;
	 //input vars begin
	 gt2_shared[t] = dev_var_in[gt2+pp];
	 beta2_shared[t] = dev_var_in[beta2+pp];
	 At3_shared[t] = dev_var_in[At3+pp];
	 gt3_shared[t] = dev_var_in[gt3+pp];
	 gt4_shared[t] = dev_var_in[gt4+pp];
	 gt1_shared[t] = dev_var_in[gt1+pp];
	 At0_shared[t] = dev_var_in[At0+pp];
	 At2_shared[t] = dev_var_in[At2+pp];
	 At4_shared[t] = dev_var_in[At4+pp];
	 beta1_shared[t] = dev_var_in[beta1+pp];
	 beta0_shared[t] = dev_var_in[beta0+pp];
	 gt5_shared[t] = dev_var_in[gt5+pp];
	 At5_shared[t] = dev_var_in[At5+pp];
	 gt0_shared[t] = dev_var_in[gt0+pp];
	 alpha_shared[t] = dev_var_in[alpha+pp];
	 At1_shared[t] = dev_var_in[At1+pp];
	 //input vars end
	 // staged vars begin
	 gt_rhs_shared[t] = dev_var_out[gt_rhs+pp];
	 // staged vars end
	 // deriv vars begin
	 agrad_2_gt4_shared[t] = agrad_2_gt4[pp];
	 agrad_2_gt0_shared[t] = agrad_2_gt0[pp];
	 agrad_1_gt2_shared[t] = agrad_1_gt2[pp];
	 grad_2_beta1_shared[t] = grad_2_beta1[pp];
	 agrad_0_gt5_shared[t] = agrad_0_gt5[pp];
	 grad_1_beta1_shared[t] = grad_1_beta1[pp];
	 agrad_2_gt1_shared[t] = agrad_2_gt1[pp];
	 agrad_2_gt2_shared[t] = agrad_2_gt2[pp];
	 agrad_0_gt1_shared[t] = agrad_0_gt1[pp];
	 agrad_1_gt5_shared[t] = agrad_1_gt5[pp];
	 agrad_1_gt4_shared[t] = agrad_1_gt4[pp];
	 agrad_0_gt3_shared[t] = agrad_0_gt3[pp];
	 agrad_1_gt0_shared[t] = agrad_1_gt0[pp];
	 agrad_0_gt2_shared[t] = agrad_0_gt2[pp];
	 grad_2_beta0_shared[t] = grad_2_beta0[pp];
	 grad_0_beta2_shared[t] = grad_0_beta2[pp];
	 agrad_2_gt5_shared[t] = agrad_2_gt5[pp];
	 grad_0_beta0_shared[t] = grad_0_beta0[pp];
	 agrad_1_gt3_shared[t] = agrad_1_gt3[pp];
	 agrad_0_gt4_shared[t] = agrad_0_gt4[pp];
	 agrad_2_gt3_shared[t] = agrad_2_gt3[pp];
	 agrad_0_gt0_shared[t] = agrad_0_gt0[pp];
	 grad_0_beta1_shared[t] = grad_0_beta1[pp];
	 agrad_1_gt1_shared[t] = agrad_1_gt1[pp];
	 grad_2_beta2_shared[t] = grad_2_beta2[pp];
	 grad_1_beta0_shared[t] = grad_1_beta0[pp];
	 grad_1_beta2_shared[t] = grad_1_beta2[pp];
	 // deriv vars end
	 // deriv vars end
	__syncthreads();
		//load data from global to shared memory ends
		      // Dendro: {{{ 
		      // Dendro: original ops: 210
		      // Dendro: printing temp variables
		   double 		DENDRO_0 = 2*alpha_shared[t];
		   double 		DENDRO_1 = grad_0_beta0_shared[t];
		   double 		DENDRO_2 = (2.0L/3.0L)*gt0_shared[t];
		   double 		DENDRO_3 = grad_1_beta1_shared[t];
		   double 		DENDRO_4 = grad_2_beta2_shared[t];
		   double 		DENDRO_5 = 2*gt1_shared[t];
		   double 		DENDRO_6 = grad_0_beta1_shared[t];
		   double 		DENDRO_7 = 2*gt2_shared[t];
		   double 		DENDRO_8 = grad_0_beta2_shared[t];
		   double 		DENDRO_9 = grad_1_beta0_shared[t];
		   double 		DENDRO_10 = grad_1_beta2_shared[t];
		   double 		DENDRO_11 = (1.0L/3.0L)*gt1_shared[t];
		   double 		DENDRO_12 = (2.0L/3.0L)*DENDRO_4;
		   double 		DENDRO_13 = grad_2_beta0_shared[t];
		   double 		DENDRO_14 = grad_2_beta1_shared[t];
		   double 		DENDRO_15 = (1.0L/3.0L)*gt2_shared[t];
		   double 		DENDRO_16 = (2.0L/3.0L)*DENDRO_3;
		   double 		DENDRO_17 = (2.0L/3.0L)*DENDRO_1;
		   double 		DENDRO_18 = 2*gt4_shared[t];
		   double 		DENDRO_19 = (1.0L/3.0L)*gt4_shared[t];
		      // Dendro: printing variables

		      gt_rhs00pp = -At0_shared[t]*DENDRO_0 + (4.0L/3.0L)*DENDRO_1*gt0_shared[t] - DENDRO_2*DENDRO_3 - DENDRO_2*DENDRO_4 + DENDRO_5*DENDRO_6 + DENDRO_7*DENDRO_8 + beta0_shared[t]*agrad_0_gt0_shared[t] + beta1_shared[t]*agrad_1_gt0_shared[t] + beta2_shared[t]*agrad_2_gt0_shared[t];
		      gt_rhs01pp = -At1_shared[t]*DENDRO_0 + DENDRO_1*DENDRO_11 + DENDRO_10*gt2_shared[t] + DENDRO_11*DENDRO_3 - DENDRO_12*gt1_shared[t] + DENDRO_6*gt3_shared[t] + DENDRO_8*gt4_shared[t] + DENDRO_9*gt0_shared[t] + beta0_shared[t]*agrad_0_gt1_shared[t] + beta1_shared[t]*agrad_1_gt1_shared[t] + beta2_shared[t]*agrad_2_gt1_shared[t];
		      gt_rhs02pp = -At2_shared[t]*DENDRO_0 + DENDRO_1*DENDRO_15 + DENDRO_13*gt0_shared[t] + DENDRO_14*gt1_shared[t] + DENDRO_15*DENDRO_4 - DENDRO_16*gt2_shared[t] + DENDRO_6*gt4_shared[t] + DENDRO_8*gt5_shared[t] + beta0_shared[t]*agrad_0_gt2_shared[t] + beta1_shared[t]*agrad_1_gt2_shared[t] + beta2_shared[t]*agrad_2_gt2_shared[t];
		      gt_rhs11pp = -At3_shared[t]*DENDRO_0 + DENDRO_10*DENDRO_18 - DENDRO_12*gt3_shared[t] - DENDRO_17*gt3_shared[t] + (4.0L/3.0L)*DENDRO_3*gt3_shared[t] + DENDRO_5*DENDRO_9 + beta0_shared[t]*agrad_0_gt3_shared[t] + beta1_shared[t]*agrad_1_gt3_shared[t] + beta2_shared[t]*agrad_2_gt3_shared[t];
		      gt_rhs12pp = -At4_shared[t]*DENDRO_0 + DENDRO_10*gt5_shared[t] + DENDRO_13*gt1_shared[t] + DENDRO_14*gt3_shared[t] - DENDRO_17*gt4_shared[t] + DENDRO_19*DENDRO_3 + DENDRO_19*DENDRO_4 + DENDRO_9*gt2_shared[t] + beta0_shared[t]*agrad_0_gt4_shared[t] + beta1_shared[t]*agrad_1_gt4_shared[t] + beta2_shared[t]*agrad_2_gt4_shared[t];
		      gt_rhs22pp = -At5_shared[t]*DENDRO_0 + DENDRO_13*DENDRO_7 + DENDRO_14*DENDRO_18 - DENDRO_16*gt5_shared[t] - DENDRO_17*gt5_shared[t] + (4.0L/3.0L)*DENDRO_4*gt5_shared[t] + beta0_shared[t]*agrad_0_gt5_shared[t] + beta1_shared[t]*agrad_1_gt5_shared[t] + beta2_shared[t]*agrad_2_gt5_shared[t];
		      // Dendro: reduced ops: 162
		      // Dendro: }}} 
	// store computed variables

} /** computes rhs chi_rhs*/
_device__ void chi_rhs(int pp, double eta, double *dev_var_in,
	double * dev_var_out,){
	#include "para_derivs_offsets.h"
,
	#include "para_staged.h"
){
	//allocate memory for shared deriv variables. 


	 //input vars  shared alloc begin
	__shared__ double beta2_shared[256];
	__shared__ double K_shared[256];
	__shared__ double beta1_shared[256];
	__shared__ double beta0_shared[256];
	__shared__ double chi_shared[256];
	__shared__ double alpha_shared[256];
	 //input vars shared alloc end
	 // staged vars shared alloc begin
	__shared__ double chi_r_shared[256];
	 // staged vars shared alloc end
	 // deriv vars shared alloc begin
	__shared__ double grad_1_beta1_shared[256];
	__shared__ double grad_0_beta0_shared[256];
	__shared__ double agrad_0_chi_shared[256];
	__shared__ double agrad_1_chi_shared[256];
	__shared__ double grad_2_beta2_shared[256];
	__shared__ double agrad_2_chi_shared[256];
	 // deriv vars shared alloc end


	int thread_id = blockIdx.x*256 + threadIdx.x;
	 //input vars begin
	 beta2_shared[t] = dev_var_in[beta2+pp];
	 K_shared[t] = dev_var_in[K+pp];
	 beta1_shared[t] = dev_var_in[beta1+pp];
	 beta0_shared[t] = dev_var_in[beta0+pp];
	 chi_shared[t] = dev_var_in[chi+pp];
	 alpha_shared[t] = dev_var_in[alpha+pp];
	 //input vars end
	 // staged vars begin
	 chi_r_shared[t] = dev_var_out[chi_r+pp];
	 // staged vars end
	 // deriv vars begin
	 grad_1_beta1_shared[t] = grad_1_beta1[pp];
	 grad_0_beta0_shared[t] = grad_0_beta0[pp];
	 agrad_0_chi_shared[t] = agrad_0_chi[pp];
	 agrad_1_chi_shared[t] = agrad_1_chi[pp];
	 grad_2_beta2_shared[t] = grad_2_beta2[pp];
	 agrad_2_chi_shared[t] = agrad_2_chi[pp];
	 // deriv vars end
	 // deriv vars end
	__syncthreads();
		//load data from global to shared memory ends
		      // Dendro: {{{ 
		      // Dendro: original ops: 22
		      // Dendro: printing temp variables
		   double 		DENDRO_0 = (2.0L/3.0L)*chi_shared[t];
		      // Dendro: printing variables

		      chi_rhspp = DENDRO_0*K_shared[t]*alpha_shared[t] - DENDRO_0*(grad_0_beta0_shared[t] + grad_1_beta1_shared[t] + grad_2_beta2_shared[t]) + beta0_shared[t]*agrad_0_chi_shared[t] + beta1_shared[t]*agrad_1_chi_shared[t] + beta2_shared[t]*agrad_2_chi_shared[t];
		      // Dendro: reduced ops: 20
		      // Dendro: }}} 
	// store computed variables

} /** computes rhs At_rhs*/
_device__ void At_rhs(int pp, double eta, double *dev_var_in,
	double * dev_var_out,){
	#include "para_derivs_offsets.h"
,
	#include "para_staged.h"
){
	//allocate memory for shared deriv variables. 


	 //input vars  shared alloc begin
	__shared__ double gt2_shared[32];
	__shared__ double beta2_shared[32];
	__shared__ double At3_shared[32];
	__shared__ double gt3_shared[32];
	__shared__ double gt4_shared[32];
	__shared__ double gt1_shared[32];
	__shared__ double At0_shared[32];
	__shared__ double At2_shared[32];
	__shared__ double K_shared[32];
	__shared__ double beta1_shared[32];
	__shared__ double beta0_shared[32];
	__shared__ double gt5_shared[32];
	__shared__ double At4_shared[32];
	__shared__ double gt0_shared[32];
	__shared__ double At5_shared[32];
	__shared__ double chi_shared[32];
	__shared__ double alpha_shared[32];
	__shared__ double At1_shared[32];
	 //input vars shared alloc end
	 // staged vars shared alloc begin
	__shared__ double At_rhs_shared[32];
	 // staged vars shared alloc end
	 // deriv vars shared alloc begin
	__shared__ double grad_2_gt1_shared[32];
	__shared__ double grad2_0_2_alpha_shared[32];
	__shared__ double grad_1_Gt2_shared[32];
	__shared__ double grad2_2_2_gt3_shared[32];
	__shared__ double grad2_1_1_chi_shared[32];
	__shared__ double agrad_0_At1_shared[32];
	__shared__ double grad_0_gt4_shared[32];
	__shared__ double grad2_1_2_gt1_shared[32];
	__shared__ double grad2_1_1_gt4_shared[32];
	__shared__ double grad2_2_2_gt1_shared[32];
	__shared__ double grad_2_beta0_shared[32];
	__shared__ double grad2_0_1_gt0_shared[32];
	__shared__ double grad2_0_0_gt4_shared[32];
	__shared__ double grad2_1_1_alpha_shared[32];
	__shared__ double grad_0_beta0_shared[32];
	__shared__ double grad2_2_2_gt5_shared[32];
	__shared__ double agrad_2_At2_shared[32];
	__shared__ double grad_2_Gt1_shared[32];
	__shared__ double grad2_2_2_chi_shared[32];
	__shared__ double grad_2_gt2_shared[32];
	__shared__ double grad_1_chi_shared[32];
	__shared__ double agrad_0_At5_shared[32];
	__shared__ double agrad_2_At4_shared[32];
	__shared__ double agrad_1_At0_shared[32];
	__shared__ double grad2_0_2_gt1_shared[32];
	__shared__ double agrad_1_At5_shared[32];
	__shared__ double grad2_0_0_chi_shared[32];
	__shared__ double grad2_0_0_gt3_shared[32];
	__shared__ double grad_1_gt2_shared[32];
	__shared__ double grad2_1_2_gt4_shared[32];
	__shared__ double grad2_0_1_gt2_shared[32];
	__shared__ double agrad_1_At2_shared[32];
	__shared__ double grad_1_Gt1_shared[32];
	__shared__ double grad2_1_1_gt3_shared[32];
	__shared__ double grad2_0_1_alpha_shared[32];
	__shared__ double grad2_1_2_alpha_shared[32];
	__shared__ double grad_0_gt2_shared[32];
	__shared__ double grad2_0_2_chi_shared[32];
	__shared__ double grad_0_gt5_shared[32];
	__shared__ double agrad_2_At0_shared[32];
	__shared__ double grad_0_beta2_shared[32];
	__shared__ double grad2_1_2_gt2_shared[32];
	__shared__ double grad_0_Gt1_shared[32];
	__shared__ double grad_1_gt3_shared[32];
	__shared__ double grad2_1_1_gt1_shared[32];
	__shared__ double grad_0_gt0_shared[32];
	__shared__ double grad_2_alpha_shared[32];
	__shared__ double grad_2_gt3_shared[32];
	__shared__ double grad_2_gt4_shared[32];
	__shared__ double agrad_2_At5_shared[32];
	__shared__ double grad2_0_1_gt4_shared[32];
	__shared__ double grad_1_beta0_shared[32];
	__shared__ double grad_1_beta2_shared[32];
	__shared__ double grad_2_beta1_shared[32];
	__shared__ double grad2_1_2_gt0_shared[32];
	__shared__ double grad2_2_2_gt4_shared[32];
	__shared__ double agrad_1_At1_shared[32];
	__shared__ double grad2_0_0_gt2_shared[32];
	__shared__ double agrad_0_At2_shared[32];
	__shared__ double agrad_0_At3_shared[32];
	__shared__ double grad_1_alpha_shared[32];
	__shared__ double grad2_0_1_gt5_shared[32];
	__shared__ double grad_0_gt3_shared[32];
	__shared__ double grad_1_beta1_shared[32];
	__shared__ double agrad_1_At3_shared[32];
	__shared__ double agrad_2_At3_shared[32];
	__shared__ double grad2_0_2_gt0_shared[32];
	__shared__ double grad2_0_0_gt0_shared[32];
	__shared__ double grad2_1_2_gt3_shared[32];
	__shared__ double grad2_0_2_gt5_shared[32];
	__shared__ double grad_0_Gt0_shared[32];
	__shared__ double grad_2_gt5_shared[32];
	__shared__ double grad2_1_1_gt2_shared[32];
	__shared__ double grad2_2_2_alpha_shared[32];
	__shared__ double grad_0_beta1_shared[32];
	__shared__ double grad2_1_1_gt5_shared[32];
	__shared__ double grad2_0_0_gt1_shared[32];
	__shared__ double grad2_0_2_gt4_shared[32];
	__shared__ double grad_1_gt1_shared[32];
	__shared__ double grad2_1_1_gt0_shared[32];
	__shared__ double grad2_2_2_gt0_shared[32];
	__shared__ double agrad_0_At0_shared[32];
	__shared__ double grad_2_Gt2_shared[32];
	__shared__ double grad_2_gt0_shared[32];
	__shared__ double grad_2_Gt0_shared[32];
	__shared__ double grad2_0_2_gt2_shared[32];
	__shared__ double agrad_0_At4_shared[32];
	__shared__ double agrad_2_At1_shared[32];
	__shared__ double grad2_0_0_alpha_shared[32];
	__shared__ double grad2_0_1_gt1_shared[32];
	__shared__ double grad2_1_2_chi_shared[32];
	__shared__ double grad2_0_2_gt3_shared[32];
	__shared__ double grad2_1_2_gt5_shared[32];
	__shared__ double grad_0_gt1_shared[32];
	__shared__ double grad2_0_1_chi_shared[32];
	__shared__ double agrad_1_At4_shared[32];
	__shared__ double grad_1_gt0_shared[32];
	__shared__ double grad_0_chi_shared[32];
	__shared__ double grad_0_Gt2_shared[32];
	__shared__ double grad2_0_0_gt5_shared[32];
	__shared__ double grad_1_gt4_shared[32];
	__shared__ double grad_1_gt5_shared[32];
	__shared__ double grad2_0_1_gt3_shared[32];
	__shared__ double grad_2_chi_shared[32];
	__shared__ double grad_2_beta2_shared[32];
	__shared__ double grad_1_Gt0_shared[32];
	__shared__ double grad_0_alpha_shared[32];
	__shared__ double grad2_2_2_gt2_shared[32];
	 // deriv vars shared alloc end


	int thread_id = blockIdx.x*32 + threadIdx.x;
	 //input vars begin
	 gt2_shared[t] = dev_var_in[gt2+pp];
	 beta2_shared[t] = dev_var_in[beta2+pp];
	 At3_shared[t] = dev_var_in[At3+pp];
	 gt3_shared[t] = dev_var_in[gt3+pp];
	 gt4_shared[t] = dev_var_in[gt4+pp];
	 gt1_shared[t] = dev_var_in[gt1+pp];
	 At0_shared[t] = dev_var_in[At0+pp];
	 At2_shared[t] = dev_var_in[At2+pp];
	 K_shared[t] = dev_var_in[K+pp];
	 beta1_shared[t] = dev_var_in[beta1+pp];
	 beta0_shared[t] = dev_var_in[beta0+pp];
	 gt5_shared[t] = dev_var_in[gt5+pp];
	 At4_shared[t] = dev_var_in[At4+pp];
	 gt0_shared[t] = dev_var_in[gt0+pp];
	 At5_shared[t] = dev_var_in[At5+pp];
	 chi_shared[t] = dev_var_in[chi+pp];
	 alpha_shared[t] = dev_var_in[alpha+pp];
	 At1_shared[t] = dev_var_in[At1+pp];
	 //input vars end
	 // staged vars begin
	 At_rhs_shared[t] = dev_var_out[At_rhs+pp];
	 // staged vars end
	 // deriv vars begin
	 grad_2_gt1_shared[t] = grad_2_gt1[pp];
	 grad2_0_2_alpha_shared[t] = grad2_0_2_alpha[pp];
	 grad_1_Gt2_shared[t] = grad_1_Gt2[pp];
	 grad2_2_2_gt3_shared[t] = grad2_2_2_gt3[pp];
	 grad2_1_1_chi_shared[t] = grad2_1_1_chi[pp];
	 agrad_0_At1_shared[t] = agrad_0_At1[pp];
	 grad_0_gt4_shared[t] = grad_0_gt4[pp];
	 grad2_1_2_gt1_shared[t] = grad2_1_2_gt1[pp];
	 grad2_1_1_gt4_shared[t] = grad2_1_1_gt4[pp];
	 grad2_2_2_gt1_shared[t] = grad2_2_2_gt1[pp];
	 grad_2_beta0_shared[t] = grad_2_beta0[pp];
	 grad2_0_1_gt0_shared[t] = grad2_0_1_gt0[pp];
	 grad2_0_0_gt4_shared[t] = grad2_0_0_gt4[pp];
	 grad2_1_1_alpha_shared[t] = grad2_1_1_alpha[pp];
	 grad_0_beta0_shared[t] = grad_0_beta0[pp];
	 grad2_2_2_gt5_shared[t] = grad2_2_2_gt5[pp];
	 agrad_2_At2_shared[t] = agrad_2_At2[pp];
	 grad_2_Gt1_shared[t] = grad_2_Gt1[pp];
	 grad2_2_2_chi_shared[t] = grad2_2_2_chi[pp];
	 grad_2_gt2_shared[t] = grad_2_gt2[pp];
	 grad_1_chi_shared[t] = grad_1_chi[pp];
	 agrad_0_At5_shared[t] = agrad_0_At5[pp];
	 agrad_2_At4_shared[t] = agrad_2_At4[pp];
	 agrad_1_At0_shared[t] = agrad_1_At0[pp];
	 grad2_0_2_gt1_shared[t] = grad2_0_2_gt1[pp];
	 agrad_1_At5_shared[t] = agrad_1_At5[pp];
	 grad2_0_0_chi_shared[t] = grad2_0_0_chi[pp];
	 grad2_0_0_gt3_shared[t] = grad2_0_0_gt3[pp];
	 grad_1_gt2_shared[t] = grad_1_gt2[pp];
	 grad2_1_2_gt4_shared[t] = grad2_1_2_gt4[pp];
	 grad2_0_1_gt2_shared[t] = grad2_0_1_gt2[pp];
	 agrad_1_At2_shared[t] = agrad_1_At2[pp];
	 grad_1_Gt1_shared[t] = grad_1_Gt1[pp];
	 grad2_1_1_gt3_shared[t] = grad2_1_1_gt3[pp];
	 grad2_0_1_alpha_shared[t] = grad2_0_1_alpha[pp];
	 grad2_1_2_alpha_shared[t] = grad2_1_2_alpha[pp];
	 grad_0_gt2_shared[t] = grad_0_gt2[pp];
	 grad2_0_2_chi_shared[t] = grad2_0_2_chi[pp];
	 grad_0_gt5_shared[t] = grad_0_gt5[pp];
	 agrad_2_At0_shared[t] = agrad_2_At0[pp];
	 grad_0_beta2_shared[t] = grad_0_beta2[pp];
	 grad2_1_2_gt2_shared[t] = grad2_1_2_gt2[pp];
	 grad_0_Gt1_shared[t] = grad_0_Gt1[pp];
	 grad_1_gt3_shared[t] = grad_1_gt3[pp];
	 grad2_1_1_gt1_shared[t] = grad2_1_1_gt1[pp];
	 grad_0_gt0_shared[t] = grad_0_gt0[pp];
	 grad_2_alpha_shared[t] = grad_2_alpha[pp];
	 grad_2_gt3_shared[t] = grad_2_gt3[pp];
	 grad_2_gt4_shared[t] = grad_2_gt4[pp];
	 agrad_2_At5_shared[t] = agrad_2_At5[pp];
	 grad2_0_1_gt4_shared[t] = grad2_0_1_gt4[pp];
	 grad_1_beta0_shared[t] = grad_1_beta0[pp];
	 grad_1_beta2_shared[t] = grad_1_beta2[pp];
	 grad_2_beta1_shared[t] = grad_2_beta1[pp];
	 grad2_1_2_gt0_shared[t] = grad2_1_2_gt0[pp];
	 grad2_2_2_gt4_shared[t] = grad2_2_2_gt4[pp];
	 agrad_1_At1_shared[t] = agrad_1_At1[pp];
	 grad2_0_0_gt2_shared[t] = grad2_0_0_gt2[pp];
	 agrad_0_At2_shared[t] = agrad_0_At2[pp];
	 agrad_0_At3_shared[t] = agrad_0_At3[pp];
	 grad_1_alpha_shared[t] = grad_1_alpha[pp];
	 grad2_0_1_gt5_shared[t] = grad2_0_1_gt5[pp];
	 grad_0_gt3_shared[t] = grad_0_gt3[pp];
	 grad_1_beta1_shared[t] = grad_1_beta1[pp];
	 agrad_1_At3_shared[t] = agrad_1_At3[pp];
	 agrad_2_At3_shared[t] = agrad_2_At3[pp];
	 grad2_0_2_gt0_shared[t] = grad2_0_2_gt0[pp];
	 grad2_0_0_gt0_shared[t] = grad2_0_0_gt0[pp];
	 grad2_1_2_gt3_shared[t] = grad2_1_2_gt3[pp];
	 grad2_0_2_gt5_shared[t] = grad2_0_2_gt5[pp];
	 grad_0_Gt0_shared[t] = grad_0_Gt0[pp];
